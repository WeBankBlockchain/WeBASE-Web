export default {
  login: {
    user: "User",
    password: "Password",
    verificationCode: "Verification Code",
    login: "Login",
    guomi: "GM",
    hash: "Normal",
  },
  inputText: {
    user: "Please enter User",
    password: "Please enter Password",
    verificationCode: "Verification Code",
    blockInput: "Search by Block / Txn Hash",
    contractSearch: "Please enter the contract name or address",
    transactionSearch: "Search by Block / Txn Hash",
  },
  text: {
    realName: "Real Name",
    mobile: "mobile",
    IDNumber: "ID Number",
    company: "company",
    address: "address",
    expireTime: "expireTime",
    renewal: "renewal",
    waitingTip:
      "contract compilation,it will take about a few minutes, please wait...",
    Contractcompiling: "contract compilation, please wait...",
    compilationSucceeded: "Contract compilation succeeded",
    remarks: "remarks",
    updatePassword: "Change Password",
    updateSetting: "Config",
    email: "Change",
    versionInfo:
      'Please view according to the "details" button in the front list ',
    detail: "detail",
    changeTmp: "Select Tmp",
    customApplication: "Custom App",
    isRedeploy: "Has the contract been deployed or redeployed?",
    noStoreContract: "Please open a contract in the left panel",
    reqOvertime: "Request Timeout",
    loginFail: "Login Failed",
    systemError: "System Error",
    copy: "Copy",
    arrow: "Arrow",
    copyErrorMsg: "Key is empty, do not copy.",
    copySuccessMsg: "Copy Success",
    copyHash: "Copy Hash",
    total: "Total",
    tiao: "",
    blockSearchMsg: "Search block hash does not support fuzzy query",
    delete: "Delete",
    update: "Change",
    confirmDelete: "Are you sure to delete?",
    confirmCancel: "Are you sure to revocation?",
    confirmDorp:
      "Make sure stop the group first, then drop local group data. Are you sure ?",
    confirmDorp2:
      "Deleting group data will delete the node data, block and transaction data, contract data, etc. corresponding to the local database (does not affect the data on the chain). Are you sure to delete the group data?",
    confirmStop:
      "Also, make sure that the number of groups the currently selected node belongs to is greater than 1. Otherwise, stopping the node's group will result in abnormal node consensus",
    sure: "Ok",
    next: "next",
    cancel: "Cancel",
    select: "Please select",
    tips: "Tips",
    updateSuccessMsg: "Update Success",
    proposalSuccessMsg:
      "The proposal for modifying the node sucess. If the proposal requires multiple members to vote, please go to the permission management page to vote",
    createSuccessMsg: "Create Success",
    cancelSuccessMsg: "Cancel Success",
    save: "Save",
    compile: "Compile",
    deploy: "Deploy",
    compileError: "Compile Error",
    send: "Send",
    selectSuccess: "Succeeded",
    transactionSuccess: "Successful Transaction!",
    transactionFail: "Transaction Failed!",
    noData: "No Data",
    input: "Please Input",
    sendInput: "Please Param Input",
    intEight: "Value range -128 to 127",
    intSixTeen: "Value range -32768 to 32767",
    uintEight: "Value range 0 to 255",
    uintSixTeen: "Value range 0 to 65535",
    search: "Search",
    example: "For Example",
    implement: "Run",
    implementResult: "Implement Result",
    confirmSubmit: "Confirm to submit?",
    addSuccess: "Added Successfully",
    Administrator: "Administrator",
    normalUsers: "Normal users",
    modify: "modify",
    start: "Start",
    stop: "Stop",
    remove: "Remove",
    recover: "Recover",
    add: "Add",
    parse: "Parse",
    parseTitle: "Enter your contract's ABI to auto-parse",
    INEXISTENT: "INEXISTENT",
    STOPPING: "STOPPING",
    RUNNING: "RUNNING",
    STOPPED: "STOPPED",
    DELETED: "DELETED",
    FAIL: "FAIL",
    parseAbiManually: "Or enter your parameters manually",
    addParameter: "Add parameter",
    functionType: "Function type",
    argument: "Argument",
    value: "Value",
    dropGroupData: "DropGroupData",
    running: "Running",
    maintaining: "Maintaining",
    abnormal: "Abnormal",
    nodeAddGroupSuccess:
      "Please go to the node management module to set the node as a 'consensus node'",
    externalNode: "External node",
    groupTimestamp: "Timestamp",
    nodeList: "Node list",
    joinExitedGroup: "Join Exited Group",
    timestampConf: "Timestamp of group genesis conf",
    sealerListConf:
      'Sealer list of group genesis conf, for example : ["nodeId1","nodeId2"]',
    sealerListConf_1:
      'Sealer list of group genesis conf ，The joining group must be consistent with the consensus node list (not the current consensus node list) configured by the creation block，for example : ["nodeId1","nodeId2"]',
    group: "Group",
    groupConfTitle: "Genesis config",
    groupConf:
      "genesis conf，Please check the node group profile of this group.",
    groupConf4:
      "a conflict between the local data of and the group data on the chain. For example, to rebuild the chain or group, please",
    groupMgmt: "to group management",
    groupConf4_1:
      "delete the data of the corresponding group or create a new background database in",
    groupConf4_all:
      "There is a conflict between the local data of the group and the group data on the chain. For example, to rebuild the chain or group, please delete the data of the corresponding group or create a new background database in group management",
    confirm: "Confirm",
    importSuccessed: "Import Successed",
    noExportGroup:
      "The current group is obtained from the group on the chain, and there is no creation block configuration",
    agreeNode_1: "Three steps for a new node to join a group: ",
    agreeNode_2:
      "If this node manager contains  another node(front) already in the group(as sealer or observer node), click left button below, add the new node as sealer/observer before generate a group;",
    agreeNode_3:
      "If this node manager dosen't have any sealer or observer of the group, you need to add the new node",
    agreeNode_4:
      "into the group as sealer/observer by yourself in the other ways; if already added, click 'continue' to go ahead;",
    agreeNode_5: "generate group, start group, join group",
    agreeNode_6: "(consensus node / observation node)",
    agreeNode_7:
      "For details, please refer to the help document - User Manual of webase management platform - appendix - dynamic group management user guide in the upper right corner",
    addAgreeNode: "Add as Observer",
    agreedNode: "Added,continue",
    nodeId: "Node Id",
    getFail: "get fail",
    agreeNodeBtn: "Added as consensus / observation node, continue",
    addNode: "New Node",
    upgradeNode: "Upgrade Node",
    reset: "Delete chain",
    resetSuccess:
      "Successfully initiated the reset contract administrator proposal",
    deploying: "Deploying",
    deployFail: "Deploy failure",
    restarting: "Restarting",
    deleteChain: "This operation deletes the chain. Do you want to continue?",
    adding: "Adding",
    addFail: "Add failed",
    imageMode: "Docker Image pull mode",
    manual: "Manual",
    automatic: "Automatic (recommended)",
    imageModeInfo1: "Automatic: pull the image from webase's CDN.",
    imageModeInfo2:
      "Manual: Manually load docker image by cdn's compression package to the host.",
    imageModeInfo3: "dockerhub：pull the image from Dockerhub to the host.",
    hostListInfo:
      "Operating system requirements: CentOS 7.2 / Ubuntu 16.04 / Debian 9;Configuration requirements: 2 core 4G, 500G hard disk;SSH free login needs to be configured",
    chainName: "Chain Name",
    chainVersion: "Chain Version",
    chainStatus: "Chain Status",
    chainProgress: "Chain Progress",
    chainDeployed: "The chain has been deployed",
    cancelDelete: "Undeleted",
    hostStatus: "Host Status",
    hostTitle: "Host information",
    hostMgrTitle: "Host Mgmt",
    chainTitle: "Chain Mgmt",
    dockerCatalog: "Docker directory",
    errInfo: "View error messages",
    webaseVersion: "WeBASE Version",
    supportVersion: "Support Version",
    port5002: "The default is 5002",
    ip: "Host IP",
    org: "Agency name",
    developer: "Developer",
    goCreatPrivateKey: "Please create a private key",
    searchMessage: "Request Success",
    emptyFolder: "Empty Folder",
    folderIsExists: "Contract path is exists",
    folder: "Folder",
    previewAndDescription: "Preview And Description",
    developing: "Application development, please look forward to...",
    appIntroduction: "Contract warehouse",
    warehouseDes:
      "The contract warehouse provides common tool contracts and recommended application contract templates. Users can import contracts into their own directory.",
    fileSize: "The upload file size cannot exceed 100kb!",
    registerCns: "Register CNS",
    version: "Version",
    no: "No",
    yes: "Yes",
    registerSuccess: "Register Success",
    register: "Register",
    cnsName: "CNS Name",
    cns: "CNS",
    registerCnsTips:
      "If the version is empty, you can enter the version to register",
    registered: "Registered",
    updateRegister: "Do you want to update the registration",
    chainInfo: "Chain Information",
    chainType: "Chain Type",
    sha256: "SHA256",
    sm3: "SM3",
    contractCount: "The number of batch upload contracts cannot exceed 20",
    addChain: "Add Chain",
    check: "Check",
    notNull: "Not Null",
    nodeCount: "The number of nodes must be greater than or equal to two.",
    checkSuccess: "Check Successful",
    checkFail: "Check failed",
    initializeStart: "Initialization start",
    initializeSuccess: "Initialization successful",
    initializeFail: "Initialization failed",
    chainConfigSuccess: "Chain configured successfully",
    addNodeConfigSuccess: "New node configured successfully",
    new: "New",
    configSuccess: "Chain configured on host success",
    configFail: "Chain configured on host failed",
    NotCheck: "Not check",
    addHost: "New host",
    installDirectory: "Installation directory",
    checkHostInfo: "Check host, continue?",
    Cancelled: "Cancelled",
    deleteHostInfo: "Delete the host?",
    deleteHostSuccess: "Delete host successfully.",
    portConflict: "Port already in use.",
    used: "Has been used",
    addHostSuccess: "New host successfully added",
    noviceGuide: "Novice guide",
    click: "Click",
    here: "Here",
    enterHost: "Enter host management",
    environmentReady: "Environment Ready",
    readyAnsibleInfo:
      "You need to install ansible on the machine where the WeBASE-Node-Manager is located and configure the private key for ansible",
    readyDockerInfo:
      "You need to install the latest version of docker and start docker",
    visualization: "Visualization of deployment process",
    addHostInfo:
      "Enter host management, click Add host button, fill in IP and file path (file path is the installation path of node)",
    addCheckNode: "Add node information and check and initialize the host",
    addCheckNodeInfo1:
      "Enter the node management, select the image pull mode, select the chain version, and click the add node button to add a node.",
    addCheckNodeInfo2:
      "The new node pop-up window selects the host, fills in each port, and fills in the number of nodes. The number of nodes is the number of new nodes, and the port increases according to the filled port.",
    addCheckNodeInfo3:
      "Note: do not fill in the used ports or there are used ports in the incremental range.",
    checkNodeInfo:
      "Check the host. After adding the node, click the check button.",
    initializationInfo:
      "Initialize the host. When the node status is successfully detected, you can perform the initialization operation and click the initialization button.",
    deployStartChain: "Deploy chain and start",
    deployStartChainInfo:
      "When the node status is initialized successfully, the deployment operation can be carried out. Click the deployment button. The deployment chain is asynchronous and takes a long time. Please wait patiently.",
    nodeLog: "Operation log",
    checkErrorInfo:
      "The node is not detected or failed to check. Initialization cannot be performed",
    newHost: "New Host",
    addNodeInfo: "Add node complete",
    goHostInfo: "Please go to host management to add a host.",
    down: "Down",
    noAddNodeInfo: "Please add node",
    leavePageInfo:
      "Leaving this page will stop the process of adding new chain/nodes. Confirm to leave this page?",
    laodngCheck: "Checking, please wait",
    loadingInit: "Initializing, please wait",
    loadingDeploy: "Deploying, please wait",
    loadingInfo:
      "Chain starting, this process takes about a few minutes,please wait",
    ruleAddUser: "Please add a new private key user",
    loading: "loading",
    clearNode: "Clear form",
    clearNodeInfo: "Clear form, please confirm?",
    startingInfo: "Starting, It takes about 30 seconds...",
    stopingInfo: "Stoping, It takes about 30 seconds...",
    resetingInfo: "Chain deleting, please wait...",
    deletingingInfo: "Node deleting, please wait...",
    cnsNameVersion: "CNS name or CNS version cannot be empty",
    startingInfo: "Starting, It takes about 30 seconds",
    stopingInfo: "Stoping, It takes about 30 seconds",
    resetingInfo: "Chain deleting, please wait",
    deletingingInfo: "Node deleting, please wait",
    upgradeFailed: "Upgrade failed",
    addingNode: "Adding node",
    restart: "Restart",
    restartingInfo: "Node restarting,please wait",
    restartIndfo1:
      "Restart consensus node may cause chain consensus exception, please confirm?",
    restartIndfo2: "Confirm node restart?",
    initChainTimeout:
      "Pull image timeout, please switch the image pull mode to manual",
    exportSdk: "SDK Cert Download",
    gmssl:
      'When using guomi SSL, you need to put the SDK Certificate in a folder named "GM"',
    registerInfo: "Register",
    appIntroduction1: "App Doc",
    appTmp: "App Tmp",
    appName: "App Name",
    appDocLink: "Doc link",
    appDesc: "App Desc",
    appDetail: "App Detail",
    appIcon: "App Icon",
    creatApp: "Creat App",
    modifyApp: "Modify App",
    appLinkService: "Link App",
    notRegister: "Not Register",
    notAlive: "Not Alive",
    useTmp: "Use Tmp",
    process: "Process",
    registerDialogTitle: "Registration information",
    appTitleDev: "Application management platform transformation (developer)",
    appListTile: "App List",
    appTitleAdmin: "Application configuration (administrator)",
    appStep11:
      "Get registration information through service registration, and register service with baas through API",
    appStep12:
      "Connect with baas through the basic capability API provided by baas",
    appStep21: "Add app",
    appStep22: "Start application plug in",
    appStepTag1: "Account on the chain",
    appStepTag2: "Chain and configuration",
    appStepTag3: "Mgt account",
    appStepTag4: "Contract",
    appDescContent:
      "Application management function is a kind of application management plug-in access function provided by baas management desk. Baas provides application management function menu and access general specification. Each application can register to the baas management console according to the access specification, so as to realize the connection between baas and each application from the user, blockchain account, basic configuration, contract and other aspects.",
    copyInfo: "Copy",
    imgSize:
      "Only one picture can be uploaded at a time, with the size of 80 * 80px. PNG and JPG formats are supported, and the size cannot exceed 200KB",
    imgSize200k: "Upload image size cannot exceed 200KB!",
    imgSize80px: "Upload image size 80 * 80px",
    decimal: "Decimal Key",
    decimalType: "Decimal",
    hexType: "Hex",
    exportWeid: "Support import in WeID",
    title: "Title",
    totalUser: "Full users",
    normalUser: "Registered users",
    unregisteredUser: "Unregistered users",
    totalContract: "Full contracts",
    normalContract: "Registered contracts",
    unregisteredContract: "Unregistered contracts",
    checkData: "Look up",
    closeSign: "privateKey not support transfer",
    textInfo: "The description length is 1 to 120 bits",
    appInfo1:
      "IP is for reference, and can be modified in specific application.",
    appInfo2:
      'Please click the "Application document" reference to register the application.',
    versionError:
      'The Solc version failed to load. Please check whether the corresponding contract version exists in the "/static/js" directory',
    exportJavaProject: "Export java project",
    exportJavaProjectInfo1:
      "Please select the relevant contract to export and generate java project",
    exportJavaProjectInfo2:
      "Note: only compiled contracts can be used to export Java projects",
    projectName: "Project nmae",
    projectGroupName: "Group name",
    projectUser: "user",
    projectFront: "Node",
    projectContract: "Select contract",
    compileStatus: "Compilation status",
    compiled: "Compiled",
    uncomplie: "Not compiled",
    projectFolder: "Folder",
    importSuccessed: "Import Successed",
    exportSuccessed: "export Successed",
    updateSuccess: "update Success",
    actualChannelIp: "Modify according to the actual channelip",
    projectTitle: "Project Info",
    notHaveAbi: "The ABI information cannot be empty",
    notHaveBin: "The BIN information cannot be empty",
    haveSelectionAll: "The contract is not compiled at all",
    haveCertSdk: "Failed to get SDK certificate. Please check certificate file",
    haveChannelPort:
      "Fill it in according to the node front corresponding ChannelPort",
    addContractAddress: "Bind",
    importContractTip:
      "Decoding transaction output requires compiling contract in IDE or import abi of contract",
    nodeActive: "Node active",
    nodeNotActive: "Node not active",
    updateSUcessIsAuth1:
      " Permission control is enabled for the current group, the modification action will initiate a proposal, require other chain members to join ",
    updateSUcessIsAuth2: ' "System Administration-Rights Management" ',
    updateSUcessIsAuth3:
      " Vote in the proposal record list to complete the modification operation ",
    enableAuth: "Enable auth",
    enable: "Enable",
    disable: "Disable",
    adminAddr: "The account of admin",
    configSuccess:
      "Config Success. Please restart the node to apply the configuration.",
  },
  rule: {
    chainCommite: "Chain committee already exists",
    userAddressCorrect: "Please enter the correct user address",
    eventName: "please enter the event name",
    textLong: "1 to 32 characters in length",
    textLong1_12: "1 to 12 digits in length",
    textLong1_62: "1 to 62 digits in length",
    textLong1_100: "100 characters or less",
    textLong1_200: "The length is between 1 and 200 characters",
    textLong1_300: "The length is between 1 and 300 characters",
    textLong1_32767: "Must be less than or equal to 32767",
    passwordError: "Login password error",
    loginPasswordType: "Please input the password correctly",
    ipName: "Please enter IP name",
    ipRule: "IP does not comply with rules",
    portName: "Please enter the port name",
    portLong: "1 to 12 digits in length",
    portRule: "Please enter a number from 1 to 65535",
    isPort: "Please enter port",
    agencyName: "Please enter the agency name",
    agencyLong: "1 to 16 digits in length",
    agencyRule: "Please input Chinese, English and numbers for agency name",
    adminRule: "Please select private key",
    nodeType: "Please select a node type",
    contractName: "Please enter the contract name",
    contractAdmin: "Please enter the contract administrator",
    contractAddress: "Please enter the contract address",
    userAddress: "please enter a user address",
    fromAddress: "Please select a chain User",
    contractAbi: "Please enter the contract ABI",
    contractLong: "1 to 32 characters in length",
    contractRule:
      "Contains letters, numbers, and '_', starts with a letter, cannot end with '_', as in COM_WEBANK",
    contractGroupRule:
      "Contains letters, numbers and '.',It starts with a letter and cannot end with '.', such as com.webank",
    IpRule: "Please enter the correct IP",
    folderName: "Please enter a folder name",
    folderLong: "1 to 12 characters in length",
    folderRule: "Please enter numbers, letters or underscores",
    selectAdmin: "Please select an administrator",
    sqlRule: "Please input sql",
    outUserAddress: "Please select an external account address",
    configName: "Please select a configuration name",
    configValue: "Please enter the configuration value",
    configValueNumber: "Configuration value must be a number",
    accountRule: "User name can only enter letters and numbers",
    passwordLong: "6 to 12 characters in length",
    passwordRule:
      "Composed of letters, numbers, and at least one uppercase letter and one lowercase letter",
    groupTimestamp: "Please enter Timestamp",
    nodeIdList: "Please enter nodeList",
    number: "Please enter number",
    groupId: "Please enter group ID",
    correctJson: "Invalid input: Unexpected end of JSON input",
    targetNode: "Please enter target node",
    ipSame: "You can't have the same IP",
    selectGroup: "Please select Groups",
    selctDockerImageType: "Select the docker image pull mode",
    userRule: "Please enter user",
    fromUserRule: "Please check account",
    thresholdRule: "Please enter threshold",
    weightRule: "Please enter weight",
    eventName: "Please enter event name",
    fromBlock: "Please enter from block",
    toBlock: "Please enter to block",
    blockNumber: "Greater than 0,-1 represents the current block height",
    weightNumber: "Greater than 0,less than 2147483647",
    inputIsNumber: "Input is not a number",
    inputIsAddress: "Input is not address",
    inputIsJson: "Input is not JSON",
    privateKeyNameRule: "It can only be numbers or letters",
    appNameRule: "Please enter app name",
    appDocLinkRule: "Please enter app doc link",
    appDescRule: "Please enter app desc",
    appDetailRule: "Please enter app detail",
    appLinkDocRule:
      "Please input the link correctly, such as: starting with HTTP / HTTPS",
    artifactName: "Please enter project name",
    group: "Please enter group name",
    frontId: "Please check node",
    checkContract: "Please check contract",
    addContractAddress: "bind",
    contractAddressLong: "contract address' length supposed to be 42",
    contractAddressHex:
      "contract address supposed to start with 0x/0X and all hex string",
    inputCPU: "Please enter CPU cores",
    inputMemory: "Please enter memory size(GB)",
    proposalId: "Please enter proposalId",
    weightRules: "value 0~100",
    routeParam: "Please enter routeParam",
    contractAddressLiquidLong:
      "The length of the contract address cannot exceed 64 bits",
    contractAddressHexLiquid:
      "Contract address starts with / and contains alphanumeric underscores",
    contractAddressCorrect: "Please enter the correct contract address",
  },
  head: {
    helpText: "Document",
    group: "Groups",
    changePassword: "Change Password",
    changeMessage: "Change Message",
    exit: "Exit",
    versionInfo: "Version",
    dataBigScreen: "Large data screen",
    deleteSelf: "Delete Account",
    chain: "Chain",
  },
  title: {
    Contractcompiling: "contract compilation, please wait...",
    bfs: "BFS",
    checkMethod: "Check Method Auth",
    checkDeploy: "Check User Deploy",
    dataOverview: "Overview",
    blockTitle: "Block Information",
    nodeTitle: "Node Mgmt",
    contractTitle: "Contract Mgmt",
    resetContractUser: "Reset Constract User",
    contractIDE: "Contract IDE",
    contractList: "Contract List",
    CNSmanager: "CNS Query",
    CNSTips:
      "CNS query Description: the contract naming service CNS provides the record of the mapping relationship between the contract name and the contract address on the chain and the corresponding query function, so that the caller can call the contract on the chain by remembering the simple contract name.",
    CRUDTips:
      "Crud Description: CRUD (add, delete, modify and query) can create tables and perform add, delete, modify and query operations on tables.Tips: if deployment and table creation permissions are enabled, the operation of table creation requires deployment and table creation permissions. Table permissions are required for deleting and modifying tables.",
    CRUDServiceManagement: "CRUD",
    PrivateKey: "Private Key Mgmt",
    systemManager: "System Mgmt",
    permission: "Permission Mgmt",
    permissionTips:
      "Description of management authority: authority control is based on the access mechanism of external account (tx.origin), which controls the authority of contract deployment, table creation, table writing (insertion, update and deletion), and table reading is not controlled by authority.",
    permissionHref: "Specific documents: [permission control]",
    configManager: "Configuration Mgmt",
    configManagerTips:
      "System Configuration Management Description: System configuration can configure system property values (currently supports the settings of tx_count_limit and tx_gas_limit properties).",
    certificate: "Certificate Mgmt",
    accountManagement: "Account Mgmt",
    transactionAudit: "Transaction Audit",
    userTransaction: "User Transaction",
    unusualUser: "Unusual User",
    unusualContract: "Unusual Contract",
    transactionInfo: "Transaction Information",
    systemMonitor: "System Metrics",
    nodesMonitor: "Node Metrics",
    hostMonitor: "Host Metrics",
    emailAlarm: "Alarm Config",
    emailAlarmType: "Alarm Type Config",
    restore: "Restore",
    zoom: "Zoom",
    back: "Back",
    stack: "Stack",
    tiled: "Tiled",
    subscribeEvent: "Subscribe Event",
    blockEvent: "Block Event",
    contractEvent: "Contract Event",
    groupManagement: "Group Mgmt",
    abiList: "ABI List",
    parseAbi: "ABI Encode",
    uploadSolc: "Upload different versions of compiler",
    otherUser:
      "Users without user name or public key users are external administrator accounts",
    committeeMgmt: "Committee Mgmt",
    developerMgmt: "Developer Mgmt",
    checkEvent: "Event Search",
    checkEventResult: "Event",
    eventName: "Event Name",
    onlineTools: "Online Tools",
    contractWarehouse: "Contract Warehouse",
    toolsContract: "Tools Contract",
    directory: "Directory",
    mgmtCns: "Mgmt CNS",
    appManagement: "App Mgmt",
    toolsContract: "Tools Contract",
    selectDirectory: "Select Directory",
    registered: "Registered",
    all: "All",
  },
  home: {
    nodes: "Nodes",
    contracts: "Deployed Contracts",
    blocks: "Blocks",
    transactions: "Transactions",
    nodeId: "Node ID",
    blockHeight: "Block Height",
    pbftView: "PbftView",
    status: "Status",
    block: "Block",
    transaction: "Transaction",
    tranfer: "By",
    more: "More",
    run: "Running",
    unusual: "Unusual",
    chartTitle: "Trancation",
    chartExplain: "Transaction in last 7 days",
    chartTransactions: "Transactions",
    blockHash: "Block Hash",
    createTime: "Create Time",
  },
  nodes: {
    description: "describe",
    nodeIp: "Node Ip",
    nodeFront: "Front Node",
    addFront: "Add",
    frontId: "Front ID",
    ip: "IP",
    frontPort: "Front Port",
    agency: "Agency",
    modifyTime: "Modify Time",
    nodeStyle: "Node Type",
    operation: "Actions",
    sealer: "Sealer",
    observer: "Observer",
    remove: "Remove",
    deleteNode: "Delete Node",
    nodeList: "Node List",
    nodeDescription:
      "Node management Description: node types can be set through node management. Including: 1. Set the corresponding node as a consensus node according to the node node ID. 2. Set the corresponding node as the observation node according to the node nodeid. 3. Set the corresponding node as free node according to node nodeid.",
    updateNodesType: "Update Nodes Type",
    updateNodesSetting: "Update Nodes Resource",
    frontConfig: "Front Configure",
    addFrontSuccessMsg: "Add Front Success",
    addFrontErrMsg: "add Front Fail",
    admin: "Private key",
    observerText:
      "Set as observer node, node would not seal, but only synchronize block..Please confirm your operation.",
    removeText:
      "Set as removed node, node would not seal or synchronize block.Please confirm your operation.",
    sealerText:
      "Set as sealer node, node would act as sealer. Please confirm your operation.",
    version: "Version",
    addGroup: "Generate Group",
    groupId: "Group Id",
    groupName: "Group Name",
    nodeCount: "Node Count",
    createTime: "Create Time",
    nodeId: "Node Id",
    frontIp: "Front ID",
    modifyGroup: "Modify Group",
    addAbi: "Import ABI",
    updateAbi: "Update ABI",
    groupStatus: "Status",
    status: "Status",
    groupTimestamp: "Timestamp",
    failCreatGroup: "Failed to generate group",
    failStartGroup: "Failed to start group",
    addHadGroup: "Join Group",
    targetNode: "Target Node",
    sealerNodeList: "Sealer Nodes",
    guideTitle: "Build a blockchain network process",
    deployButton: "Click the Deploy button",
    blockChainButton: "Fill in block chain information",
    guidetep1:
      "The deployment blockchain pop-up window pops up.This button does not display when the chain is present.",
    guidetep2:
      "Select the blockchain version, fill in the address of Webpase-Sign, and finally fill in host information: including host IP, number of host deployment nodes, host organization, node group and block chain data storage directory.",
    guidetep3:
      "Click the 'Start deployment' button in the popup window. It will take a long time to deploy blockchain. Please wait patiently.",
    startSuccess: "The startup command has been executed",
    stopSuccess: "Stop success",
    initialize: "Initialize",
    upgrading: "Upgrading",
    inputAgency: "Please enter your agency",
    inputNodes: "Please enter the number of nodes",
    addNodeSuccess: "New node succeeds",
    chainConfig: "Blockchain configuration",
    chainVersion: "Docker image version",
    newVersion: "Get the latest version",
    webaseSignAdr: "the address of the WeBASE-Sign",
    addressError: "Incorrect address format",
    webaseSghAdrInfo:
      "the address of the WeBASE-Sign.for example 127.0.0.1:6004.",
    hostList: "The host list",
    inputHostIp: "Please enter the host IP address",
    ipError: "The IP format is incorrect",
    hostIp: "Host IP address",
    inputNodesNumber: "Enter the number of deployment nodes",
    thanOne: "It has to be greater than 1",
    NodesNumber: "Number of deployed nodes",
    inputHostAgency: "Enter the agency of the host",
    noWhitespace: "No whitespace",
    hostAgency: "The agency of the host",
    nodesGroup: "Please enter the group to which the node belongs",
    nodesGroupInfo: "The node belongs to a group.",
    chainDirectory: "Blockchain data storage directory",
    inputChainDirectory: "Please enter the blockchain data storage directory",
    startDeploy: "Start the deployment",
    deploying: "Blockchain is being deployed",
    selectGroup: "Select group",
    selectVersion: "Select version",
    selectVersionInfo: "Please select the blockchain version",
    upgraded: "Please wait while upgrading",
    deleteErrorInfo1:
      "If the node is the last node of the host, whether to delete the host",
    deleteErrorInfo2:
      "If the node is the last node of the agency, whether to delete the agency",
    dleteNodeSuccess: "Node removal successful",
    dockerRefresh: "Docker image list has been refreshed",
    nodesNumber: "The number of deployment time nodes cannot be less than 2",
    chainStatus: "Chain status",
    starting: "starting",
    notice:
      "Note: Make sure the group has at least two consensus nodes. If there are less than two, an error will be reported.",
    addContract: "Import Contract",
    modifySealerWarn: "Only observer can be set in sealer",
    selearCountWarn: "Groups require at least two consensus nodes",
    cpus: "CPU(Cores)",
    memory: "Mems(GB)",
  },
  contracts: {
    cancall: "Can be called",
    toTip:
      "The to field in the transaction calling the contract is the contract address",
    toTip1:
      "To of the transaction receipt of deploying the contract is empty or all 0",
    contractAddressTip:
      "The contractAddress field in the transaction that deploys the contract is the contract address",
    contractAddressTip1:
      "ContractAddress of the transaction receipt of calling the contract is empty or all 0",
    openAdmin: "Open Admin",
    closeAdmin: "Close Admin",
    set: "set",
    WhiteList: "Can be called",
    blackList: "Can not be called",
    setPolicy: "Set contract method policy",
    setAdmin: "Set contract method permissions",
    createFile: "Create File",
    createFolder: "Create Folder",
    upLoadFile: "Upload File",
    contractTips:
      "All contracts deployed within the group need to be added in contract management, compiled and saved, otherwise it will be judged as abnormal contracts.",
    rename: "Rename",
    contractCompileSuccess: "Contract Compiled Successfully!",
    contractCompileFail: "Contract Compilation Failed!",
    renameFail: "Deployed contract cannot be renamed!",
    nameFail:
      "The same contract exists in the same directory. Please rename it!",
    contractLong: "Please enter numbers or letters, 1 to 32 digits in length!",
    contractSize:
      "The file size is more than 400k, please upload a file less than 400k!",
    contractType: "Please upload a file in. Sol format!",
    contractNameSameFail:
      "Contract with the same name cannot exist in the same directory!",
    contractSaveSuccess: "Contract saved successfully!",
    contractDeleteFail:
      "There are deployed contracts in the folder, unable to delete the folder!",
    contractSaveTips: "Press Ctrl + s to save the contract content",
    contractOpenTips: "Please click on the left panel to ",
    createContractTips: "open a contract",
    uploadContractTips: "or create a new contract",
    sendTransaction: "Call",
    changeUser: "Select User",
    compileSuccess: "< Compile Successfully！",
    conmileNameError: "Contract name and file name should be consistent!",
    deploySuccess: "< Deployment Success！",
    contractDeploySuccess: "Contract deployed successfully！",
    contractName: "Name",
    filePath: "File Path",
    folderName: "Folder Name",
    folderSameFail: "The new folder has the same name as the existing folder",
    user: "User",
    params: "Params",
    paramsInfo:
      'If the parameter type is an array, enter the following format, comma separated, with double quotes for non-numeric and Boolean values, such as ["aaa","bbb"] and [100,101]; Escape if array parameters contain double quotes, for example: ["aaa\\"bbb","ccc"].',
    contractAddress: "Address",
    method: "Method",
    contractAddressInput: "Please enter the contract address",
    contractAddressInfo: "Optional item,import deployed contract addresses.",
    selectUser: "Please Select Users",
    methodType: "Method Type",
    methodName: "Method Name",
    contractCatalogue: "Location",
    copyContractAddress: "Copy Contract Address",
    contractAbi: "ABI",
    contractBin: "Bin",
    runtimeBin: "Runtime-bin",
    copyContractAbi: "Copy Contract ABI",
    copyContractBin: "Copy Contract Bin",
    abiInfo: "ABI Details",
    contractVersion: "Version",
    adminUser: "User Account",
    createTable: "Create Table",
    insertTable: "Insert Table Record",
    searchTable: "Query Table Record",
    updateTable: "Update Table Record",
    deleteTable: "Delete Table Record",
    tableDetail: "Display Table Details",
    addPrivateKeyInfo: "Please add a private key user!",
    updateAbi: "Update",
    deleteAbi: "Delete",
    limit_1: "Only one file can be uploaded at a time",
    txResult: "Trading content",
    freeze: "Freeze",
    unfreeze: "Unfreeze",
    contractStatus: "Contract Status",
    normal: "Normal",
    freezeDes: "members of the chain and deployment of user to freeze / thaw",
    userAddress: "User Address",
    status: "Status",
    eventParam: "Please follow the prompt of event parameter type strictly",
    exportSol: "Export",
    sureExport: "Sure Export",
    transactionReceipt: "Transaction Receipt",
    limit_1: "Only one file can be uploaded at a time",
    exportToIde: "Export To IDE",
    folder: "Folder",
    cnsTitle: "On chain CNS query",
    bfsTitle: "BFS contract resource addressing function",
    localCnsTitle: "Local CNS",
    checkNodeActive: "check",
  },
  bfs: {
    pwdRoute: "Pwd Route:",
    routeParam: "Route Param",
    cd: "CD",
    ls: "LS",
    mkdir: "MKDIR",
    routeName: "Route",
    userAddress: "User Address",
    creatSuccess: "Create Success",
    tip1: "The operation command must be cd/ls/mkdir!",
    tip2: "The path is incorrect, please re-enter!",
    tip3: "The creation path must start with 'apps' or'tables'!",
    cdSucess: "Contract resource jump succeeded",
    lsSucess: "Contract resource query succeeded",
    operate: "Operation command",
    Tip1: '1) MKDIR: Directories can only be created under "apps" and "tables";',
    Tip2: "2) CD: Switch the current path to the specified path;",
    TIP3: "3) LS: List all files or directories under the current path;",
  },
  editor: {
    None: " Success ",
    Unknown: " Unknown error ",
    BadRLP: " invalid RLP exception ",
    InvalidFormat: " Invalid format exception ",
    OutOfGasIntrinsic:
      " Deployed contract length exceeds gas limit/call contract interface parameter exceeds gas limit ",
    InvalidSignature:
      " Invalid signature exception, please check whether the signature`s private key or national secret encryption type corresponds to the non-national secret encryption type ",
    InvalidNonce: " invalid nonce exception ",
    NotEnoughCash: " Abnormal lack of cash ",
    OutOfGasBase: " Argument to call contract too long (RC version)",
    BlockGasLimitReached: "GasLimit exception ",
    BadInstruction:
      " Error construction, usually occurs when executing code using unknown opcode",
    BadJumpDestination:
      " stack error, usually occurs when jumping to the wrong stack at execution time ",
    OutOfGas: " exceeds gas usage at execution time ",
    OutOfStack: " exceeds stack limit at execution time ",
    StackUnderflow:
      " Lack of stack, usually due to lack of parameters, lack of input at execution time ",
    NonceCheckFail: "nonce check failure exception ",
    BlockLimitCheckFail: "blocklimit check failure exception ",
    FilterCheckFail: "filter check fails ",
    NoDeployPermission: " Illegal deployment contract exception ",
    NoCallPermission: " Illegal call contract exception ",
    NoTxPermission: " illegal transaction exception ",
    PrecompiledError: " Failed to execute precompilederror ",
    RevertInstruction: " Transaction rollback ",
    InvalidZeroSignatureFormat: "invalid signature format exception",
    AddressAlreadyUsed: " Address usage exception ",
    PermissionDenied:
      " Not enough permission to call contract, deploy contract ",
    CallAddressError: " Request contract address does not exist ",
    GasOverflow: "Gas overflow error ",
    TxPoolIsFull: " Transaction pool full exception ",
    TransactionRefused: " Transaction rejected exception ",
    ContractFrozen: " The contract has been frozen ",
    AccountFrozen: "Account has been frozen",
    AlreadyKnown: " The trade is already in the pool ",
    AlreadyInChain: " Transaction has been abnormal ",
    InvalidChainId: " Invalid chain ID exception ",
    InvalidGroupId: " Invalid group ID exception ",
    RequestNotBelongToTheGroup: "abnormal request do not belong to the group",
    MalformedTx: " Transaction format error ",
    OverGroupMemoryLimit: " The group memory limit is exceeded ",
    WASMValidationFailure:
      "WASM binary validation failure, usually when using the wrong cryptography method, WASM using floating-point numbers ",
    WASMArgumentOutOfRange: " Too many WASM arguments ",
    WASMUnreachableInstruction:
      "there is an error in the implementation process WASM",
    ContractAddressAlreadyUsed: "deployment contract address already exists",
    AccountAbolished: " The account has been abolished ",
    ContractAbolished: " The contract has been annulled ",
    WASMTrap: "WASM execution failed ",
  },
  privateKey: {
    addUser: "Add Users",
    importPrivateKey: "Import Private Key",
    importPrivateKeyTip:
      "After adding the private key successfully, you can view it in the private key list.",
    importPrivateKeyAccount:
      "Import the initial governance account private key",
    importPrivateKeyAccountTip:
      "In the permission governance mode, it is used to add the private key of the initial governance committee account",
    modifyThresholdTip:
      "Voting pass conditions 1) Satisfy the participation rate 2) Satisfy the threshold (participation voting weight/total weight)",
    addUserTips:
      "The account number of the transaction sent in the group needs to be added to the private key management, otherwise it will be judged as an abnormal user.",
    searchUser: "Please enter user name or public key address",
    copyPublicKey: "Copy Public Key",
    privateKey: "Private Key",
    publicKey: "Public Key",
    createUser: "Create User",
    userName: "Name",
    userId: "ID",
    description: "Description",
    userAddress: "Address",
    userStatus: "Status",
    inputDescription: "Please enter User Description",
    updateUserSuccess: "User modified successfully",
    normal: "Normal",
    disable: "Disable",
    privateKeyUser: "Private key user",
    publicKeyUser: "Public key user",
    publicKeyInfo: "Public key information",
    inputUserName: "Please enter Username",
    inputPublicInfo:
      "Please enter public key information or public key address.",
    userLong: "Within 120 characters",
    inputPublic: "Please enter public key information",
    addUserSuccess: "User added successfully!",
    addUserFail: "Failed to add user!",
    signUserId: "Sign User Id",
    inputFileName: "Please enter privateKey name",
    inputFileType: "Please enter privateKey type",
    PublicAddress: "Please enter user  public key address",
    fileName: "PrivateKey Name",
    fileType: "File Type",
    importFile: "Import file",
    copy: "Copy",
    password: "p12 Password",
    placeholderPassword: "Please enter password (p12)",
    passwordError: "Password cannot be Chinese",
    file: "File",
    thaw: "Thaw",
    freeze: "Freeze",
    validatorPrivateKey: "Please enter privateKey key",
    validatorPrivateKey16: "Please enter the hex (excluding 0x)",
    validatorPrivateKey1: "Please enter hexadecimal",
    validatorPrivateKey10: "Please enter decimal",
    importType: "Import Type",
    importFileValidator: "Please upload the file",
    bindPrivateKey: "Bind PrivateKey",
  },
  system: {
    chainManager: "Chain Management Permission",
    addChainManager: "Add Chain Management Permission",
    copyAddress: "Copy Address",
    commonManager: "General Management Permission",
    chainAdministrator: "Chain Administrator",
    submit: "Submit",
    tableName: "table Name",
    userAddress: "Account Address",
    userName: "Account Name",
    deployAndCreate: "Deploy and Create Table",
    cns: "CNS",
    sysConfig: "System Configuration",
    node: "Node",
    confirmPermission:
      "When adding the first administrator permission, the administrator will start the permission. Please confirm whether the account is correct. Misoperation may cause the service to be unavailable.",
    dialogTips: "Tips: public key users cannot authorize other users",
    outUserAddress: "User Address",
    inputUser: "Please enter your Account Name",
    authorizedSuccess: "Authorized Success",
    deleteSuccess: "Delete Successful",
    configContent1:
      "It is not recommended to modify tx_count_limit and tx_gas_limit arbitrarily. These parameters can be modified as follows.",
    configContent2:
      "Limited hardware performance such as machine network or CPU: decrease tx_count_limit, or reduce business pressure.",
    configContent3:
      "The business logic is too complicated. When the block is executed, there is not enough gas: increase the tx_gas_limit.",
    checkStatus:
      "If FISCO BCOS after 3.3.0 needs to set auth_check_status to 1, it is regarded as startup permission control. After startup will not be able to close ",
    updateConfig: "Modify Configuration Values",
    configKey: "Name",
    configValue: "Value",
    gasLimit: "One transaction maximum gas limit",
    countLimit:
      "The maximum number of transactions that can be packaged in one block",
    gasLong: "Range from 100000 to 2147483647",
    addCertificate: "Import Certificate",
    export: "Export",
    import: "Import",
    certName: "Certificate Name",
    certType: "Certificate Type",
    fingerPrint: "Fingerprint",
    father: "Parent",
    address: "Address",
    validityFrom: "Validity Period",
    fileSize: "The upload file size cannot exceed 100kb!",
    importSuccess: "Successfully imported",
    uploadWarning1: "The current limit selects 10 files. This time I selected",
    uploadWarning2: "files and selected",
    uploadWarning3: "files.",
    to: "to",
    updateSuccess: "Successfully updated",
    agency: "Please enter agency",
    city: "Please enter address",
  },
  account: {
    addAccount: "Add Account",
    user: "Account",
    roleNameZh: "Role",
    createAccount: "Create Account",
    deleteAccount: "Delete Account",
    updataAccount: "Modify Account",
    email: "Email",
    inputEmail: "Please enter Email",
    updataEmail: "Modify Message",
    emailTypeError: "E-mail format is incorrect",
  },
  transaction: {
    blockTips: "-1 represents the current block height",
    time: "Duration",
    interface: "Interface",
    week: "Last Week",
    month: "Last Month",
    threeMonth: "Last Three Months",
    regulatoryUser: "Failed to get supervised user list!",
    total: "Current Total Quantity",
    stroke: "Stroke",
    unusualTips:
      "Too many exceptions (greater than or equal to 20) will stop the audit. It is recommended to check the transaction status, find out the cause of the abnormality and import the contract or user to clean up the abnormal record.",
    transactionTime: "Latest Transaction Time",
    hash: "Hash",
    inputUser: "Please Enter User",
    inputUserAddress: "Please Enter User Address",
    startTime: "Start Date",
    endTime: "End Date",
    unusualMoreTips:
      "There are too many exceptions and the audit has been stopped. It is recommended to check the transaction status, find out the cause of the abnormality and import the contract or user to clean up the abnormal record.",
    transactionHash: "Transaction Hash",
    transactionSearchFail:
      "Search transaction hash does not support fuzzy query.",
    toNull: "The deployment contract, the to field is empty.",
    unresolved: "Unresolved",
    reduction: "Encode",
    searchTransactionFail: "Unable to query transaction information",
    decode: "Decode",
  },
  monitor: {
    node: "Node",
    showDate: "Show Date",
    contrastDate: "Contrast Date",
    selectDate: "Select Date",
    startEndTime: "Start/End",
    timeRange: "Select Time Range",
    dataGranularity: "Data Granularity",
    minute: "Min",
    second: "Sec",
    confirm: "Confirm",
    addFrontInfo: "Add Front Information",
    blockHeight: "Block Height",
    pendingCount: "Pending Transactions",
    dateFormat: "dd-MM-yyyy",
    dateLabel: "dd-MM-yyyy",
    startTime: "Start Time",
    endTime: "End Time",
    utilizationRate: " Usage",
    RAM: "MEM",
    hardDisk: "Hard Disk",
    txbps: "Uplink",
    rxbps: "Downlink",
    bandwidth: " Bandwidth",
    contrastDateData: "Contrast Daily Data",
    noData: "No data collected or data is 0",
    showDateData: "Display Date Data",
    nullData: "No Data Obtained",
    hostInfo: "Host Information",
    nodeInfo: "Node Information",
    selectDate: "Please select display date and time",
    blockSize: "Block Size AVG",
    blockCycle: "Block Cycle AVG",
    tps: "TPS AVG",
  },
  alarm: {
    alarmCofig: "System Metrics",
    emailAlarmConfig: "Alarm Config",
    emailAlarmConfigYips:
      "System configuration management instructions: The system configuration can configure system property values (currently supports the setting of tx_count_limit and tx_gas_limit properties).",
    agreementType: "Protocol",
    address: "Address",
    port: "Port",
    authentication: "Authentication",
    authenticationTips:
      "Use username / password for authentication by default and connect to the mailbox service via SSL / TLS",
    user: "EmailAddress",
    password: "Auth Password",
    save: "Save",
    test: "Test",
    saveTips:
      "The mailbox configuration has been modified and not saved, please click the save button to save the modification.",
    serverTypeTips: "Please enter service type",
    longSize: "1 to 32 characters",
    notRule: "Please enter numbers, letters or underscores",
    enterAddress: "Please enter an address",
    enterEmail: "Please input your email",
    enterEmailPsd: "Please enter your email password",
    enterFormat: "Please enter the encoding format",
    tip: "Tip",
    send: "Send",
    cancel: "Cancel",
    emailTypeErr: "E-mail format is incorrect",
    cancelEnter: "Cancel entry",
    sendEmailSuccess: "Mail sent successfully!",
    updateEmailAlarmConfigSuccess:
      "Modifying the alarm mailbox configuration succeeded!",
    enterSaveInfo: "Please save the modified configuration information!",
    alarmTypeConfig: "Alarm type Config",
    enableAlarm: "Whether to enable the alarm",
    alarmCofigList: "Alarm List",
    alarmEmailTile: "Tiltle",
    emailContent: "Template",
    sendTime: "Interval",
    operation: "Actions",
    update: "Update",
    disable: "Disable",
    enable: "enable",
    alarmLogList: "Logs",
    alarmType: "Alarm type",
    alarmLevel: "Alarm level",
    high: "high",
    common: "common",
    low: "low",
    alarmContent: "Alarm content",
    alarmStatus: "Alarm status",
    processed: "processed",
    unprocessed: "unprocessed",
    alarmTime: "Alarm time",
    modifyTime: "modify time",
    confirm: "confirm",
    start: "start",
    sureHandle: "Are you sure?",
    sure: "sure",
    logsSure: "The log has been confirmed",
    enableAlarm: "Enable",
    disableAlarm: "Disable alarm, continue?",
    addEmail: "Please add a receiving email!",
    noAlarmEmail: "The alarm mailbox is not set!",
    disableAlarmSuccess: "Disable alarm successfully!",
    enableAlarmSuccess: "Alarm enabled successfully!",
    nodeAlarm: "Node alert",
    auditAlert: "Audit alert",
    certAlert: "Certificate alert",
    hours: "hours",
    minute: "min",
    emailAlarmDetail: "Alarm configuration details",
    lastAlertTime: "Last alarm time",
    userList: "Send alert email",
    status: "Status",
    close: "Close",
    alarmContentTip:
      "Braces {} and their contents cannot be changed in the alarm content",
    recipientEmail: "Recipient's Email",
    recipientEmailTip: "Only select users who have added email",
    pleaseSlect: "Please choose",
    alertIntervalSecondsTip:
      "The unit of the selection box is seconds when there is no unit",
    halfHour: "0.5hour",
    date: "day",
    inputEmailTitle: "Please enter the alarm email title",
    inputalarmContent: "Please enter the alarm content",
    selectIntervalSeconds: "Please select an interval",
    noEmail:
      "This user does not have a mailbox, please add a mailbox in account management!",
    updateAlarmSuccess: "Modify alarm configuration successfully!",
    groupTips: "Data of invalid group will be deleted regularly",
    refresh: "Refresh",
  },
  guide: {
    guidePage: "Guide pages",
    addFront: "Add node front",
    addFrontTip1:
      "A java service middleware for node frontend and node binding, integrated with web3jsdk, the webase platform connects nodes through this service.",
    addFrontTip2:
      "Go to the node management page, click the front node of the new node, and fill in the correct IP and port.",
    addFrontTip3:
      "Note: After entering this page for the first time, the add front pop-up window will appear. You can add the front window here.",
    addUser: "Create a private key user",
    addUserTip1:
      "If you need to deploy a contract and test the transaction, you need to create a private key user.",
    addUserTip2:
      "Click Private Key Management to enter, select the private key user, and enter the user name.",
    createContract: "Create contract",
    createContractTip1:
      "After you create a user, you can add or upload contracts, and then compile, deploy, and send transactions. Click Contract Management, and the contract IDE enters.",
    createContractTip2:
      "Click Contract Management, click Contract IDE, click the button to write or upload a contract, and then compile, deploy, and send transactions.",
  },
  main: {
    changePassword: "Change Password",
    oldPassword: "Old password",
    newPassword: "New password",
    confirmPassword: "Confirm password",
    submit: "Submit",
    reset: "Reset",
    inputPassword: "Please enter the password",
    againPassword: "Please enter the password again",
    passwordError: "The passwords entered twice are inconsistent!",
    inputOldPassword: "Please enter the old password",
    longPassword: "6 to 12 characters",
    passwordPattern:
      "Letters, numbers, and at least one uppercase letter and one lowercase letter",
    updatePsdSuccess: "Password reset complete!",
    updatePsdError: "Password change failed!",
  },
  placeholder: {
    contractListSearch: "Search by Name / Address",
    selected: "Please select",
    selectedAccountAddress: "Select Account Address",
    selectedNoUser: "No available user, please create a new user key",
    input1_200: "Please enter the details within 200 characters",
    input1_32: "Please enter the profile within 32 characters",
    input1_300: "Please enter the details within 300 characters",
    input1_62: "Please enter the profile within 62 characters",
  },
  table: {
    contractAddress: "Address",
    contractAbi: "ABI",
    appId: "App Id",
    exchangeName: "Exchange",
    queueName: "Queue Name",
    routingKey: "RoutingKey",
    groupId: "Group Id",
    fromBlock: "From",
    toBlock: "To",
    topicList: "Contract Event",
    frontInfo: "Front Info",
    transactionReceipt: "Transaction Receipt",
    transactionInfo: "Transaction Info",
    checkEvent: "Check Search",
    checkEventResult: "Event",
    eventName: "Event Name",
    blockHeight: "Block Height",
    eventValue: "Event",
    contractName: "Contract Name",
    cnsVersion: "CNS Version",
    fileType: "Import Type",
    exportType: "Export Type",
    fileName: "PrivateKey Name",
    baseSystem: "baseSystem",
  },
  govCommittee: {
    Havedeployadmin: "The User Has Deployment Permission",
    Havemethodadmin: "This Method Has call Permission",
    Nomethodadmin: "This Method Has No Ccalling Permission",
    Noadmin: "No Permission",
    Nodeploadadmin: "The User Has No Deployment Permission",
    addCommittee: "Grant Committee Vote",
    CommitteeSuccess: "Committee Vote Success",
    modifyThreshold: "Modify Threshold Vote",
    modifyThresholdSuccess: "Modify Threshold Vote Success",
    Committee: "Committee Vote",
    revokeVote: "revoke Vote",
    revokeVoteSuccess: "revoke Vote Success",
    fromUser: "Chain Committee",
    user: "New Committee",
    address: "Address",
    weight: "Weight",
    weightRatio: "Weight Ratio(%)",
    participatesRate: "participatesRate",
    enableNum: "Enable Num",
    modifyWeight: "Modify Weight Vote",
    modifySuccess: "Modify Weight Vote Success",
    deleteCommittee: "Revoke Committee Vote",
    deleteSuccess: "Revoke Committee Vote Success",
    addSuccess: "Add Committee Vote Success",
    votingList: "Voting Record List",
    id: "ID",
    governUserId: "Govern User",
    modifyUserId: "Modify User",
    modifyUserAddress: "Modify Address",
    newValue: "New Value",
    voteType: "Vote Type",
    voteNum: "vote Number",
    voteStatus: "Vote Status",
    updatetime: "Update Time",
    threshold: "Threshold%",
    thresholdNow: "Current Threshold%",
    participatesRateNow: "Current participatesRate",
    isDelete: "Are you sure to initiate deletion voting?",
    operate: "Operate",
    agree: "Agree",
    refuse: "Refuse",
    success: "Success",
    resetSuccess: "Reset Success",
    delete: "Delete",
    blockNum: "Block Number",
    toCommittee: "To Committee",
    revokeCommittee: "Revoke Committee",
    committeeAndDeploy: "Committee&&Deployer",
    dialogTips:
      "External private key users can set by importing public key or private key.",
    setAdmin: "Set the user's call permission to a contract method",
    setPolicy:
      "Set the policy for a method of a contract (with write permission)",
    resetTips:
      "The reset contract administrator will initiate a proposal, and a corresponding vote is required. ",
  },
  devOpsMgmt: {
    addDeveloper: "Add Developer",
    deleteDev: "Delete Developer",
    deleteDeveloper: "Delete",
    user: "User",
    address: "Address",
    enableNum: "Enable Num",
    operate: "Operate",
    fromUser: "Chain Committee",
    devAddress: "Developer Address",
  },
  dialog: {
    liquidTip:
      "the address format of the liquid contract starts with / and is composed of numbers, letters and underscores",
    cnsVersion: "Please enter CNS version",
    cnsVersionPattern: "It can only be numbers, letters and'.'",
    cnsName: "Please enter CNS name",
    length1_10: "The length is between 1 and 10 character",
    privateKeyVerifyLength1_32: "The length is between 1 and 32 characters",
    addUsername: "Add Username",
    pleaseEnterUserName: "Please type in username",
    privateKeyVerifyLength: "The length is between 3 and 32 characters",
    privateKeyVerifyLength1_32: "The length is between 1 and 32 characters",
    privateKeyVerifyFont: "Can only be composed of numbers or letters",
    rename: "Rename",
    newFile: "Create",
    delete: "Delete",
    exportJavaNote: "Note: Package name must equal to contract name",
    delete: "Delete",
    cancel: "Cancel",
    confirm: "Confirm",
    sureExport: "Sure Export",
    sureDelete: "Sure Delete",
    contractNameIllegal: "Contract name illegal",
    folderNameIllegal: "Folder name illegal",
    folderName: "Folder Name",
    pleaseType: "Please type in",
    appId: "Please enter the application number",
    exchangeName: "Please enter the exchange name",
    queueName: "Please enter the queue name",
    groupId: "Please enter the group id",
    contractAbi: "Please enter contract Abi",
    contractAddress: "Please enter contract address",
    fromBlock: "Please enter from block",
    toBlock: "Please enter to block",
    topicList: "Please enter topic List",
    eventName: "Please enter event name",
    search: "Search",
    exportSol: "Export Contract",
    cnsVersion: "Please enter cns version",
    cnsVersionPattern: "It can only be numbers, letters and '.'",
    cnsName: "Please enter CNS name",
    length1_10: "The length is between 1 and 10 character",
    addContractAddress: "Bind contract address",
  },
  onlineTools: {
    onlineHashCalculator: "Hash Calculator",
    algorithm: "algorithm",
    result: "Result",
    encryption: "Encrypt",
    sign: "Sign",
    text: "Text",
    file: "File",
    drag: "Drag the file here, Or",
    upload: " click upload",
    uploadNumLimit: "Only one file can be uploaded",
  },
  progress: {
    0: "Waiting to start",
    1: "Checking host free memory and dependencies",
    2: "Checking docker service active",
    3: "Checking port whether in use",
    4: "Installing host dependencies",
    5: "Initializing and load Docker image",
    6: "Generating chain certificates and config files",
    7: "Initializing db data of chain and front",
    8: "SCP config files to host",
    9: "Configure complete, starting...",
  },
};
